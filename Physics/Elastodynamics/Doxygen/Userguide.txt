/*! \page page_UserguideElastodynamics Elastodynamics

 \tableofcontents
 
\section secUGEl1 Setup and Configuration

  A single simulation in lymph use the following MATLAB scripts:
  - \b RunSetup.m   : setup and configuration
  - \b DataTestEla.m: data input file 
  - \b RunMainEla.m : run simulation 

   Other secondary scripts are:
  - \b RunhConvergenceElastodynamics.m: verification test for h convergence (see \ref secTutElConv)
  - \b RunpConvergenceElastodynamics.m: verification test for p convergence (see \ref secTutElConv)


\subsection subUGEl1 Simulation Setup

The users can configure or customize the code for their specific needs.
In particular, \b RunSetup.m defines the  simulation setup and contains the following fields:
    \verbatim
    - isPlotMesh    : 1/0 to plot the polygonal mesh
    - isSaveVTKMesh : 1/0 to save the polygonal mesh in the VTK format
    - isPlotSolution: 1/0 to visualize the numerical solution in Matlab
    - isSaveSolution: 1/0 to save the solution in the .mat format
    - OutFolder     : folder name for the output (e.g. Output)
    - isSaveCSV     : 1/0 to save the solution in the .csv format
    - isSaveVTK     : 1/0 to save the solution in the .vtk format
    - OutFolderVTK  : folder name for the VTK-output
    - isError       : 1/0 to compute the error (e.g. OutputVTK)
    \endverbatim

\subsection subUGEl2 Input data files

To define the input data for the specific simulation you can use a MATLAB script (e.g. \b InputData/Elastic/DataTestEla.m).
You can set up the number of the element mesh, the polynomial approximation degree, the penalty constant, final time, time step, time integration scheme, 
boundary conditions, forcing terms and analystical solution (if needed). 

 \verbatim
%% InputData/DataTestLap.m 
%% Elastodynamics problem in [0,1]^2 x [0, 1] with Dirichlet conditions
Data.name = 'DataTestEla';
Data.TagElEla   = 1;         % Element tag
Data.TagBcEla   = [2 3 4 5]; % Boundary tag
Data.LabBcEla   = 'DDDD';    % (D)irichlet/(N)eumann/(A)bso
%% Geometrical properties 
Data.domain       = [0 1 0 1]; % domain bounds for a new mesh
Data.N            = 200;        % number of elements for a new mesh
Data.MeshFromFile = false;     % read mesh from file
...
%% Discretization properties                            
%% Time integration
Data.t0 = 0;
Data.T  =  1;
Data.dt = 0.01;
Data.timeint   = 'newmark';
Data.BetaNM = 0.25;
Data.GammaNM = 0.5;
%% Space discretization
Data.degree  = 1;   % Polynomial degree
Data.penalty_coeff = 10; % Penalty coefficient
...
%% Properties elastic material
Data.rho_el    = {@(x,y) 1 + 0.*x.*y};
Data.vs_el     = {@(x,y) 1 + 0.*x.*y};
Data.vp_el     = {@(x,y) 2 + 0.*x.*y};
...
%% Forcing term elastic media
Data.source_ue   = {@(x,y)  2*pi^2*cos(pi*y).*sin(pi*y).*(4*cos(2*pi*x) - (2*cos(2*pi*x))/2 - 1); ...
                    @(x,y) -2*pi^2*cos(pi*x).*sin(pi*x).*(4*cos(2*pi*y) - (2*cos(2*pi*y))/2 - 1)};
Data.source_ue_t = {@(t) sin(sqrt(2)*pi*t)};
...
%% Dirichlet BC
Data.DirBCEla  = {@(x,y) (-sin(pi*x).^2 .* sin(2*pi*y)); ...
                  @(x,y) ( sin(pi*y).^2 .* sin(2*pi*x))};

% Exact solution --> used to compute the initial conditions
Data.ue_ex    =  {@(x,y) (-sin(pi*x).^2 .* sin(2*pi*y)); ...
                  @(x,y) ( sin(pi*y).^2 .* sin(2*pi*x))};
Data.ue_t_ex  =  {@(t) sin(sqrt(2)*pi*t)};
Data.due_t_ex =  {@(t) sqrt(2)*pi*cos(sqrt(2)*pi*t)};
...                  
\end{lstlisting}
\endverbatim

\subsection subUGEl3 Run a simulation

With the file \b RunMainEla.m you can run the specific simulation. 

\verbatim
%% RunMainEla.m
%% Simulation - Path
ImportLymphPaths;
%% Inizialization
Header;
%% Simulation - Setup
RunSetup;
%% Input Data - Boundary conditions - Forcing term
DataTestEla;
%% Mesh Generation
if Data.MeshFromFile
    % Load existing mesh
    Data.meshfile = fullfile(Data.FolderName, Data.meshfileseq);
else
    % Create a new mesh
    Data.meshfile = MakeMeshMonodomain(Data,Data.N,Data.domain,Data.FolderName,Data.meshfileseq,'P','waves');
end
%% Main
[Error] = MainEla(Data,Setup);
\endverbatim



*/
